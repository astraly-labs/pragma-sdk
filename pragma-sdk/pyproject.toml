[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme>=22.5.0"]
build-backend = "hatchling.build"

[project]
name = "pragma-sdk"
description = "Core package for rollup-native Pragma Oracle"
readme = "README.md"
requires-python = ">=3.11,<3.13"
license = "MIT"
authors = [
    { name = "0xevolve", email = "matthias@pragma.build" },
]
keywords = ["Pragma", "Oracle", "Starknet"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "starknet.py==0.25.0",
    "typer==0.6.1",
    "deprecated>=1.2.14",
    "aioresponses>=0.7.4",
    "requests-mock>=1.11.0",
    "pydantic>=2.7.4",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "redis[hiredis]>=5.0.7",
    "websockets>=14.0",
]

dynamic = ["version"]

[tool.hatch.version]
path = "pragma_sdk/__init__.py"

[project.urls]
Homepage = "https://pragma.build"
Repository = "https://github.com/Astraly-Labs/pragma-sdk"
Documentation = "https://docs.pragma.build"

[tool.hatch.metadata]
allow-direct-references = true

[project.optional-dependencies]
docs = [
    "sphinx>=7.3.7",
    "furo>=2024.5.6",
    "pallets-sphinx-themes>=2.1.3",
    "enum-tools[sphinx]>=0.12.0",
]

dev = [
    "poethepoet>=0.21.1",
    "ruff>=0.4",
    "coverage>=7.2.1",
    "pytest>=7.2.2",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.6.1",
    "pytest-xdist>=3.2.1",
    "pytest-cov>=4.0.0",
    "setuptools>=68.0.0",
    "pytest-rerunfailures>=12.0",
    "moto[s3,secretsmanager]>=4.2.5",
    "boto3>=1.28.61",
    "fakeredis[json]>=2.26.0",
]

typing = [
    "mypy>=1.10",
    "types-requests>=2.26.0",
    "types-deprecated>=1.2.9",
    "types-pyyaml>=6.0.12.20240311",
]


[tool.mypy]
python_version = "3.12"
namespace_packages = true
explicit_package_bases = true
show_error_codes = true
warn_return_any = true
ignore_missing_imports = true
exclude = ["tests", "pragma_sdk/common/randomness/randomness_utils.py", "build"]
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[tool.coverage.run]
source = ["pragma_sdk"]

[tool.coverage.report]
omit = ["*_test.py", "tests/*"]
skip_empty = true

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "module"

[tool.poe.tasks]
lint = "ruff check ."
format = "ruff format ."
format_check = "ruff format . --check"
typecheck = "mypy pragma_sdk"
check_circular_imports = "uv run python tests/check_circular_imports.py"
update_abis = "find ../pragma-oracle -name '*.sierra.json' -exec cp -prv '{}' './pragma_sdk/onchain/abis' ';'"
test_integration = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/integration/ -s"
test_client = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/integration/client_test.py -s"
test_update_client = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/integration/update_client_test.py -s"
test_publisher = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/integration/publisher_test.py -s"
test_fetchers = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/integration/fetchers/ -s"
test_vrf = "coverage run -m pytest --net=devnet -v --reruns 1 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/integration/vrf_test.py -s"
test_merkle_feed = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/integration/merkle_feed_test.py -s"
test_unit = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/unit/ -s"
test_hop_handler = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/unit/common/fetchers/handlers/hop_test.py -s"
test_index_aggregation = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/unit/common/fetchers/handlers/index_aggregator_test.py -s"
test_api_client = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/unit/api_client_test.py -s"
test_rpc_monitor = "coverage run -m pytest -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/unit/onchain/test_rpc_monitor.py -s"
test = "coverage run -m pytest --net=devnet -v --reruns 5 --only-rerun aiohttp.client_exceptions.ClientConnectorError tests/ -s"
